# This Yaml Document has been converted by ESAI Yaml Pipeline Conversion Tool.
# Please make sure to check all the converted content, it is your team's responsibility to make sure that the pipeline is still valid and functions as expected.
# This pipeline will be extended to the OneESPT template
# If you are not using the E+D shared hosted pool with windows-2022, replace the pool section with your hosted pool, os, and image name. If you are using a Linux image, you must specify an additional windows image for SDL: https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/1es-pipeline-templates/features/sdlanalysis/overview#how-to-specify-a-windows-pool-for-the-sdl-source-analysis-stage
# The Task 'PublishBuildArtifacts@1' has been converted to an output named 'Publish Artifacts' in the templateContext section.
# The Task 'PublishBuildArtifacts@1' has been converted to an output named 'Publish Version Information' in the templateContext section.
trigger:
- master
- develop
pr:
- master
- develop
- feature/*
variables:
  Configuration: Release
  SDK: ''
  EOCompliance-Mac: true
  XCODE_PATH: '/Applications/Xcode_13.2.1.app/Contents/Developer'
resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release
extends:
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  ${{ else }}:
    template: v1/1ES.Unofficial.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool:
      name: Azure Pipelines
      image: macos-latest
      os: macOS
    customBuildTags:
    - ES365AIMigrationTooling-BulkMigrated
    stages:
    - stage: stage
      jobs:
      - job: ''
        displayName: Build SDK for All Platforms
        templateContext:
          outputs:
          - output: pipelineArtifact
            displayName: 'Publish Artifacts'
            artifactName: Release
        steps:
        - checkout: self
          submodules: recursive
        - bash: |
            version="$(Scripts/framework-version.sh)+$(git rev-parse --short $BUILD_SOURCEVERSION)"
            echo "Change version to $version"
            Scripts/framework-version.sh "$version"
          displayName: 'Update Version'
          condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
        - bash: 'sudo gem install jazzy --no-document'
          displayName: 'Install Jazzy'
        - task: Xcode@5
          displayName: Build App Center Frameworks
          inputs:
            xcWorkspacePath: AppCenter.xcworkspace
            scheme: 'All App Center Frameworks'
            xcodeVersion: specifyPath
            xcodeDeveloperDir: '$(XCODE_PATH)'
            args: 'SYMROOT="$(Build.BinariesDirectory)" GCC_TREAT_WARNINGS_AS_ERRORS=YES SWIFT_TREAT_WARNINGS_AS_ERRORS=YES'
          timeoutInMinutes: 50
        - task: Xcode@5
          displayName: Generate App Center Documentation
          inputs:
            xcWorkspacePath: AppCenter.xcworkspace
            scheme: 'All App Center Documentation'
        - task: Bash@3
          displayName: Archive
          inputs:
            targetType: filePath
            filePath: './Scripts/create-archive.sh'
        - task: CopyFiles@2
          displayName: 'Copy Archives to Staging Directory'
          inputs:
            SourceFolder: './AppCenter-SDK-Apple'
            Contents: '**/AppCenter-SDK-Apple*.zip'
            TargetFolder: '$(Build.ArtifactStagingDirectory)'
      - job: ''
        displayName: Version Information
        templateContext:
          outputs:
          - output: pipelineArtifact
            displayName: 'Publish Version Information'
            targetPath: '$(Build.ArtifactStagingDirectory)/Info'
            artifactName: Info
        steps:
        - bash: |
            swift --version
            swift package describe
          displayName: 'Print Swift Package Information'
        - bash: |
            VERSION=$(Scripts/framework-version.sh)
            mkdir -p $(Build.ArtifactStagingDirectory)/Info
            echo $VERSION > $(Build.ArtifactStagingDirectory)/Info/VERSION
            echo $BUILD_SOURCEVERSION > $(Build.ArtifactStagingDirectory)/Info/COMMIT
            Scripts/get-release-notes.sh $VERSION > $(Build.ArtifactStagingDirectory)/Info/RELEASE.md
          displayName: 'Collect Version Information'